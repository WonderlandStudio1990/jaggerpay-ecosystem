openapi: 3.0.0
info:
  title: WonderPAID Unified API
  version: 2024-01-31
  description: |
    Unified API specification combining Monite and Supabase functionality
  contact:
    name: WonderPAID Support
    email: support@wonderpaid.com
    url: https://wonderpaid.com/support

servers:
  - url: https://api.sandbox.monite.com/v1
    description: Monite Sandbox
  - url: https://api.monite.com/v1
    description: Monite Production
  - url: http://localhost:3000/api
    description: Local Development

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
    MoniteAuth:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: /auth/token
          scopes: {}

  schemas:
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: object

    TokenRequest:
      type: object
      required:
        - grant_type
        - client_id
        - client_secret
      properties:
        grant_type:
          type: string
          enum: [client_credentials]
        client_id:
          type: string
        client_secret:
          type: string

    TokenResponse:
      type: object
      properties:
        access_token:
          type: string
        token_type:
          type: string
        expires_in:
          type: integer

    Entity:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
          enum: [individual, organization]
        email:
          type: string
        status:
          type: string
          enum: [active, inactive]
        metadata:
          type: object
        settings:
          type: object
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    EntityCreate:
      type: object
      required:
        - type
        - email
      properties:
        type:
          type: string
          enum: [individual, organization]
        email:
          type: string
        status:
          type: string
          enum: [active, inactive]
        metadata:
          type: object
        settings:
          type: object

    UserEntity:
      type: object
      properties:
        id:
          type: string
        user_id:
          type: string
        entity_id:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

paths:
  /auth/token:
    post:
      tags: [Authentication]
      summary: Get access token
      operationId: getAccessToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRequest'
      responses:
        '200':
          description: Token generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/revoke:
    post:
      tags: [Authentication]
      summary: Revoke access token
      operationId: revokeToken
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
      responses:
        '200':
          description: Token revoked successfully
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /entities:
    post:
      tags: [Entities]
      summary: Create entity
      operationId: createEntity
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityCreate'
      responses:
        '201':
          description: Entity created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      tags: [Entities]
      summary: List entities
      operationId: listEntities
      security:
        - BearerAuth: []
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
      responses:
        '200':
          description: List of entities
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Entity'
                  pagination:
                    type: object
                    properties:
                      total:
                        type: integer
                      limit:
                        type: integer
                      offset:
                        type: integer

  /user-entities:
    post:
      tags: [UserEntities]
      summary: Create user-entity relationship
      operationId: createUserEntity
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
                - entity_id
              properties:
                user_id:
                  type: string
                entity_id:
                  type: string
      responses:
        '201':
          description: Relationship created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEntity'

    get:
      tags: [UserEntities]
      summary: List user-entity relationships
      operationId: listUserEntities
      security:
        - BearerAuth: []
      parameters:
        - name: user_id
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of user-entity relationships
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserEntity'

security:
  - BearerAuth: []
  - MoniteAuth: []

tags:
  - name: Authentication
    description: Authentication operations
  - name: Entities
    description: Entity management
  - name: UserEntities
    description: User-Entity relationship management 